openapi: 3.0.2
info:
  title: TeamEndpoints
  version: 0.0.0
paths:
  /api/public/v2/teams:
    get:
      operationId: TeamReadAll
      responses:
        '200':
          description: TeamReadAll 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamReadAllResponse'
        '400':
          description: BadRequestError 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        '401':
          description: UnauthorizedError 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponseContent'
        '403':
          description: ForbiddenError 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponseContent'
        '404':
          description: NotFoundError 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponseContent'
        '409':
          description: ConflictError 409 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponseContent'
        '422':
          description: UnprocessableContentError 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableContentErrorResponseContent'
    post:
      operationId: TeamCreateOne
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
        required: true
      responses:
        '201':
          description: TeamCreateOne 201 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamCreateOneResponse'
        '400':
          description: BadRequestError 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        '401':
          description: UnauthorizedError 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponseContent'
        '403':
          description: ForbiddenError 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponseContent'
        '404':
          description: NotFoundError 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponseContent'
        '409':
          description: ConflictError 409 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponseContent'
        '422':
          description: UnprocessableContentError 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableContentErrorResponseContent'
  /api/public/v2/teams/{teamId}:
    delete:
      operationId: TeamDeleteOne
      parameters:
        - name: teamId
          in: path
          schema:
            type: string
          required: true
        - name: force
          in: query
          schema:
            type: boolean
            default: false
          required: true
      responses:
        '204':
          description: TeamDeleteOne 204 response
        '400':
          description: BadRequestError 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        '401':
          description: UnauthorizedError 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponseContent'
        '403':
          description: ForbiddenError 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponseContent'
        '409':
          description: ConflictError 409 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponseContent'
        '422':
          description: UnprocessableContentError 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableContentErrorResponseContent'
    get:
      operationId: TeamReadOne
      parameters:
        - name: teamId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: TeamReadOne 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamReadOneResponse'
        '400':
          description: BadRequestError 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        '401':
          description: UnauthorizedError 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponseContent'
        '403':
          description: ForbiddenError 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponseContent'
        '404':
          description: NotFoundError 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponseContent'
        '409':
          description: ConflictError 409 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponseContent'
        '422':
          description: UnprocessableContentError 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableContentErrorResponseContent'
  /api/public/v2/teams/{teamId}/limits:
    get:
      operationId: TeamLimitReadOne
      parameters:
        - name: teamId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: TeamLimitReadOne 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamLimitReadOneResponse'
        '400':
          description: BadRequestError 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        '401':
          description: UnauthorizedError 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponseContent'
        '403':
          description: ForbiddenError 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponseContent'
        '404':
          description: NotFoundError 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponseContent'
        '409':
          description: ConflictError 409 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponseContent'
        '422':
          description: UnprocessableContentError 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableContentErrorResponseContent'
    put:
      operationId: TeamLimitUpdateOne
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamLimitRequest'
        required: true
      parameters:
        - name: teamId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: TeamLimitUpdateOne 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamLimitUpdateOneResponse'
        '400':
          description: BadRequestError 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        '401':
          description: UnauthorizedError 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponseContent'
        '403':
          description: ForbiddenError 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponseContent'
        '404':
          description: NotFoundError 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponseContent'
        '409':
          description: ConflictError 409 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponseContent'
        '422':
          description: UnprocessableContentError 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableContentErrorResponseContent'
components:
  schemas:
    ApiToken:
      type: object
      properties:
        id:
          type: string
        role:
          $ref: '#/components/schemas/ApiTokenRole'
      required:
        - id
        - role
    ApiTokenBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_ApiTokenType'
            - default: api_token
        _id:
          type: string
      required:
        - _id
        - _type
        - name
    ApiTokenRole:
      type: string
      enum:
        - reader
        - starter
        - configurer
        - administrator
    BadRequestErrorResponseContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    BriefResponse:
      oneOf:
        - $ref: '#/components/schemas/ApiTokenBriefResponse'
        - $ref: '#/components/schemas/ManagedLocationBriefResponse'
        - $ref: '#/components/schemas/PackageBriefResponse'
        - $ref: '#/components/schemas/PrivateLocationBriefResponse'
        - $ref: '#/components/schemas/SourceRepositoryBriefResponse'
        - $ref: '#/components/schemas/SsoGroupBriefResponse'
        - $ref: '#/components/schemas/TeamBriefResponse'
        - $ref: '#/components/schemas/TestBriefResponse'
        - $ref: '#/components/schemas/UserBriefResponse'
    BriefResponseByResourceMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/BriefResponse'
    ConflictErrorResponseContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    Credits:
      type: object
      properties:
        quota:
          type: integer
          minimum: 0
          format: int32
      required:
        - quota
    ErrorContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    ForbiddenErrorResponseContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    ManagedLocationBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_ManagedLocationType'
            - default: managed_location
        _id:
          type: string
      required:
        - _id
        - _type
        - name
    Members:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        apiTokens:
          type: array
          items:
            $ref: '#/components/schemas/ApiToken'
        ssoGroups:
          type: array
          items:
            $ref: '#/components/schemas/SsoGroup'
      required:
        - apiTokens
        - ssoGroups
        - users
    NotFoundErrorResponseContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    PackageBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_PackageType'
            - default: package
        _id:
          type: string
      required:
        - _id
        - _type
        - name
    PrivateLocationBriefResponse:
      type: object
      properties:
        _type:
          allOf:
            - $ref: '#/components/schemas/_PrivateLocationType'
            - default: private_location
        _id:
          type: string
      required:
        - _id
        - _type
    SimpleDictionary:
      type: object
      additionalProperties:
        type: string
    SourceBrief:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TestTypeResponse'
      required:
        - type
    SourceRepositoryBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_SourceRepositoryType'
            - default: source_repository
        _id:
          type: string
      required:
        - _id
        - _type
        - name
    SsoGroup:
      type: object
      properties:
        id:
          type: string
        role:
          $ref: '#/components/schemas/UserRoleV2'
      required:
        - id
        - role
    SsoGroupBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_SsoGroupType'
            - default: sso_group
        _id:
          type: string
      required:
        - _id
        - _type
        - name
    TeamAssets:
      type: object
      properties:
        tests:
          type: array
          items:
            type: string
        packages:
          type: array
          items:
            type: string
        sourceRepositories:
          type: array
          items:
            type: string
      required:
        - packages
        - sourceRepositories
        - tests
    TeamBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_TeamType'
            - default: team
        _id:
          type: string
      required:
        - _id
        - _type
        - name
    TeamCreateOneResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TeamDetailsResponse'
        relatedResources:
          $ref: '#/components/schemas/BriefResponseByResourceMap'
      required:
        - data
        - relatedResources
    TeamDetailsResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_TeamType'
            - default: team
        _id:
          type: string
        _limits:
          $ref: '#/components/schemas/TeamLimits'
        _members:
          $ref: '#/components/schemas/Members'
        _assets:
          $ref: '#/components/schemas/TeamAssets'
      required:
        - _assets
        - _id
        - _limits
        - _members
        - _type
        - name
    TeamItemResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_TeamType'
            - default: team
        _id:
          type: string
        _limits:
          $ref: '#/components/schemas/TeamLimits'
      required:
        - _id
        - _limits
        - _type
        - name
    TeamLimitReadOneResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TeamLimitResponse'
      required:
        - data
    TeamLimitRequest:
      type: object
      properties:
        credits:
          $ref: '#/components/schemas/Credits'
    TeamLimitResponse:
      type: object
      properties:
        credits:
          $ref: '#/components/schemas/Credits'
    TeamLimitUpdateOneResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TeamLimitResponse'
      required:
        - data
    TeamLimits:
      type: object
      properties:
        credits:
          $ref: '#/components/schemas/Credits'
    TeamReadAllResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TeamItemResponse'
        relatedResources:
          $ref: '#/components/schemas/BriefResponseByResourceMap'
      required:
        - data
        - relatedResources
    TeamReadOneResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TeamDetailsResponse'
        relatedResources:
          $ref: '#/components/schemas/BriefResponseByResourceMap'
      required:
        - data
        - relatedResources
    TeamRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    TestBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_TestType'
            - default: test
        _id:
          type: string
        source:
          $ref: '#/components/schemas/SourceBrief'
      required:
        - _id
        - _type
        - name
        - source
    TestTypeResponse:
      type: string
      enum:
        - build_from_sources
        - packaged
        - no_code
    UnauthorizedErrorResponseContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    UnprocessableContentErrorResponseContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    User:
      type: object
      properties:
        id:
          type: string
        role:
          $ref: '#/components/schemas/UserRoleV2'
      required:
        - id
        - role
    UserBriefResponse:
      type: object
      properties:
        email:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_UserType'
            - default: user
        _id:
          type: string
      required:
        - _id
        - _type
        - email
    UserRoleV2:
      type: string
      enum:
        - administrator
        - leader
        - tester
        - contributor
        - viewer
    _ApiTokenType:
      type: string
      enum:
        - api_token
    _ManagedLocationType:
      type: string
      enum:
        - managed_location
    _PackageType:
      type: string
      enum:
        - package
    _PrivateLocationType:
      type: string
      enum:
        - private_location
    _SourceRepositoryType:
      type: string
      enum:
        - source_repository
    _SsoGroupType:
      type: string
      enum:
        - sso_group
    _TeamType:
      type: string
      enum:
        - team
    _TestType:
      type: string
      enum:
        - test
    _UserType:
      type: string
      enum:
        - user
