openapi: 3.0.2
info:
  title: UserEndpoints
  version: '2'
paths:
  /api/public/v2/users:
    get:
      operationId: UserReadAll
      parameters:
        - name: email_contains
          in: query
          schema:
            type: string
        - name: teamId
          in: query
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: UserReadAll 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReadAllResponse'
        '400':
          description: BadRequestError 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        '401':
          description: UnauthorizedError 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponseContent'
        '403':
          description: ForbiddenError 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponseContent'
        '404':
          description: NotFoundError 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponseContent'
        '409':
          description: ConflictError 409 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponseContent'
        '422':
          description: UnprocessableContentError 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableContentErrorResponseContent'
    post:
      operationId: UserCreateOne
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '201':
          description: UserCreateOne 201 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateOneResponse'
        '400':
          description: BadRequestError 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        '401':
          description: UnauthorizedError 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponseContent'
        '403':
          description: ForbiddenError 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponseContent'
        '404':
          description: NotFoundError 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponseContent'
        '409':
          description: ConflictError 409 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponseContent'
        '422':
          description: UnprocessableContentError 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableContentErrorResponseContent'
  /api/public/v2/users/{userId}:
    delete:
      operationId: UserDeleteOne
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: UserDeleteOne 204 response
        '400':
          description: BadRequestError 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        '401':
          description: UnauthorizedError 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponseContent'
        '403':
          description: ForbiddenError 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponseContent'
        '409':
          description: ConflictError 409 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponseContent'
        '422':
          description: UnprocessableContentError 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableContentErrorResponseContent'
    get:
      operationId: UserReadOne
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: UserReadOne 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReadOneResponse'
        '400':
          description: BadRequestError 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        '401':
          description: UnauthorizedError 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponseContent'
        '403':
          description: ForbiddenError 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponseContent'
        '404':
          description: NotFoundError 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponseContent'
        '409':
          description: ConflictError 409 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponseContent'
        '422':
          description: UnprocessableContentError 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableContentErrorResponseContent'
    put:
      operationId: UserUpdateOne
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: UserUpdateOne 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateOneResponse'
        '400':
          description: BadRequestError 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        '401':
          description: UnauthorizedError 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponseContent'
        '403':
          description: ForbiddenError 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponseContent'
        '404':
          description: NotFoundError 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponseContent'
        '409':
          description: ConflictError 409 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponseContent'
        '422':
          description: UnprocessableContentError 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableContentErrorResponseContent'
components:
  schemas:
    ApiTokenBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_ApiTokenType'
            - default: api_token
        _id:
          type: string
      required:
        - _id
        - _type
        - name
    BadRequestErrorResponseContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    BriefResponse:
      oneOf:
        - $ref: '#/components/schemas/ApiTokenBriefResponse'
        - $ref: '#/components/schemas/ManagedLocationBriefResponse'
        - $ref: '#/components/schemas/PackageBriefResponse'
        - $ref: '#/components/schemas/PrivateLocationBriefResponse'
        - $ref: '#/components/schemas/SourceRepositoryBriefResponse'
        - $ref: '#/components/schemas/SsoGroupBriefResponse'
        - $ref: '#/components/schemas/TeamBriefResponse'
        - $ref: '#/components/schemas/TestBriefResponse'
        - $ref: '#/components/schemas/UserBriefResponse'
    BriefResponseByResourceMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/BriefResponse'
    ConflictErrorResponseContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    ErrorContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    ForbiddenErrorResponseContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    ManagedLocationBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_ManagedLocationType'
            - default: managed_location
        _id:
          type: string
      required:
        - _id
        - _type
        - name
    NotFoundErrorResponseContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    PackageBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_PackageType'
            - default: package
        _id:
          type: string
      required:
        - _id
        - _type
        - name
    PrivateLocationBriefResponse:
      type: object
      properties:
        _type:
          allOf:
            - $ref: '#/components/schemas/_PrivateLocationType'
            - default: private_location
        _id:
          type: string
      required:
        - _id
        - _type
    SimpleDictionary:
      type: object
      additionalProperties:
        type: string
    SourceBrief:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TestTypeResponse'
      required:
        - type
    SourceRepositoryBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_SourceRepositoryType'
            - default: source_repository
        _id:
          type: string
      required:
        - _id
        - _type
        - name
    SsoGroupBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_SsoGroupType'
            - default: sso_group
        _id:
          type: string
      required:
        - _id
        - _type
        - name
    TeamBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_TeamType'
            - default: team
        _id:
          type: string
      required:
        - _id
        - _type
        - name
    TeamRoleMember:
      type: object
      properties:
        id:
          type: string
        role:
          $ref: '#/components/schemas/UserRoleV2'
      required:
        - id
        - role
    TestBriefResponse:
      type: object
      properties:
        name:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_TestType'
            - default: test
        _id:
          type: string
        source:
          $ref: '#/components/schemas/SourceBrief'
      required:
        - _id
        - _type
        - name
        - source
    TestTypeResponse:
      type: string
      enum:
        - build_from_sources
        - packaged
        - no_code
    UnauthorizedErrorResponseContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    UnprocessableContentErrorResponseContent:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
        values:
          $ref: '#/components/schemas/SimpleDictionary'
      required:
        - code
        - message
    UserBriefResponse:
      type: object
      properties:
        email:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_UserType'
            - default: user
        _id:
          type: string
      required:
        - _id
        - _type
        - email
    UserCreateOneResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserDetailsResponse'
        relatedResources:
          $ref: '#/components/schemas/BriefResponseByResourceMap'
      required:
        - data
        - relatedResources
    UserDetailsResponse:
      type: object
      properties:
        email:
          type: string
        roles:
          $ref: '#/components/schemas/UserRoles'
        firstName:
          type: string
        lastName:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_UserType'
            - default: user
        _id:
          type: string
      required:
        - _id
        - _type
        - email
        - firstName
        - lastName
        - roles
    UserItemResponse:
      type: object
      properties:
        email:
          type: string
        roles:
          $ref: '#/components/schemas/UserRoles'
        firstName:
          type: string
        lastName:
          type: string
        _type:
          allOf:
            - $ref: '#/components/schemas/_UserType'
            - default: user
        _id:
          type: string
      required:
        - _id
        - _type
        - email
        - firstName
        - lastName
        - roles
    UserReadAllResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserItemResponse'
        relatedResources:
          $ref: '#/components/schemas/BriefResponseByResourceMap'
      required:
        - data
        - relatedResources
    UserReadOneResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserDetailsResponse'
        relatedResources:
          $ref: '#/components/schemas/BriefResponseByResourceMap'
      required:
        - data
        - relatedResources
    UserRequest:
      type: object
      properties:
        email:
          type: string
        roles:
          $ref: '#/components/schemas/UserRoles'
        firstName:
          type: string
        lastName:
          type: string
      required:
        - email
        - firstName
        - lastName
        - roles
    UserRoleV2:
      type: string
      enum:
        - administrator
        - leader
        - tester
        - contributor
        - viewer
    UserRoles:
      type: object
      properties:
        global:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleV2'
        teams:
          type: array
          items:
            $ref: '#/components/schemas/TeamRoleMember'
    UserUpdateOneResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserDetailsResponse'
        relatedResources:
          $ref: '#/components/schemas/BriefResponseByResourceMap'
      required:
        - data
        - relatedResources
    _ApiTokenType:
      type: string
      enum:
        - api_token
    _ManagedLocationType:
      type: string
      enum:
        - managed_location
    _PackageType:
      type: string
      enum:
        - package
    _PrivateLocationType:
      type: string
      enum:
        - private_location
    _SourceRepositoryType:
      type: string
      enum:
        - source_repository
    _SsoGroupType:
      type: string
      enum:
        - sso_group
    _TeamType:
      type: string
      enum:
        - team
    _TestType:
      type: string
      enum:
        - test
    _UserType:
      type: string
      enum:
        - user
